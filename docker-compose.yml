# --- shared settings for every Python container ----------------------------
x-backend: &backend
  image: devops-backend:latest # ← single image tag reused
  env_file: [.env]
  volumes:
    - ./app:/app # keep hot-reload for local dev
  restart: unless-stopped

services:
  # -------------------------------------------------------------------------
  # 1) Build the image ONCE here, then reuse it everywhere else
  # -------------------------------------------------------------------------
  app:
    <<: *backend
    build:
      context: .
    logging:
      driver: syslog
      options:
        syslog-address: "tcp://s1295395.eu-nbg-2.betterstackdata.com:514"
        tag: "hospital-backend"
      args:
        - DEV=true
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             daphne -b 0.0.0.0 -p 8000 app.asgi:application"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports: [] # handled by caddy

  celery:
    <<: *backend # NO build → no duplicate compile
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A app worker --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celerybeat:
    <<: *backend # NO build
    command: >
      sh -c "python manage.py wait_for_db &&
             celery -A app beat -l info \
             --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - db
      - redis

  # -------------------------------------------------------------------------
  # reverse-proxy
  # -------------------------------------------------------------------------
  caddy:
    image: caddy:2
    container_name: swe455-caddy_proxy
    env_file: [.env]
    environment:
      - DOMAIN=${DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - swe455-caddy_data:/data
      - swe455-caddy_config:/config
    restart: unless-stopped
    depends_on:
      - app

  # -------------------------------------------------------------------------
  # data services (unchanged)
  # -------------------------------------------------------------------------
  db:
    image: postgres:14.15-alpine3.21
    container_name: swe455-postgres_container
    env_file: [.env]
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - swe455-dev-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:alpine3.21
    container_name: swe455-redis_container
    ports:
      - "6379:6379"
    env_file: [.env]
    volumes:
      - swe455-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:9.0
    container_name: swe455-pgadmin_container
    env_file: [.env]
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - swe455-pgadmin-data:/var/lib/pgadmin
    depends_on:
      - db
    restart: unless-stopped

volumes:
  swe455-dev-db-data:
  swe455-pgadmin-data:
  swe455-caddy_data:
  swe455-caddy_config:
  swe455-redis-data:
