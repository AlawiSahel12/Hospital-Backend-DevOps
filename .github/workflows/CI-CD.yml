name: CI & CD

on:
  push:
    branches:
      - "**" # run checks on every branch

jobs:
  # --------------------------------------------------------------------------
  # TESTING  ▸  LINT ▸  REPORT ▸  UPLOAD  (with Docker-layer cache)
  # --------------------------------------------------------------------------
  test-lint:
    name: Test & Quality Gates
    runs-on: ubuntu-latest

    steps:
      # 0️⃣ ––––– Docker Hub auth (so we can pull postgres/redis)
      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 1️⃣ ––––– Source
      - uses: actions/checkout@v4.2.2

      # 2️⃣ ––––– Buildx + layer-cache
      - name: Set-up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0 # single-line install of buildx

      - name: Restore layer cache
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.buildx-cache # arbitrary local dir for the cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-          # reuse previous commits’ cache

      - name: Build & load app image (cached)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          tags: devops-backend:test # temporary local tag
          load: true # <— puts it in `docker images`
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      # 3️⃣ ––––– Runtime env (.env)  —— same as before
      - name: Write CI .env
        run: |
          cat > .env <<'ENV'
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_HOST=${{ secrets.DB_HOST }}
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
          CELERY_TIMEZONE=${{ secrets.CELERY_TIMEZONE }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          SUPPORT_EMAIL=${{ secrets.SUPPORT_EMAIL }}
          SECURITY_EMAIL=${{ secrets.SECURITY_EMAIL }}
          DOMAIN=${{ secrets.DOMAIN }}
          ENV

      # 4️⃣ ––––– Bring up the backing services **without rebuilding app**
      #       • --build never → skips the slow build we just did.
      #       • The image we just built/loaded is already available locally.
      - name: Run tests and save HTML + XML report
        run: |
          docker compose \
            --profile test up -d postgres redis      # optional: limit to deps

          docker compose run --rm --user 0 app sh -c "
            python manage.py wait_for_db &&
            pytest \
              --junitxml=/app/test-reports/results.xml \
              --html=/app/test-reports/report.html \
              --self-contained-html"

      - name: Upload Test Report Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-reports
          path: app/test-reports/

      # 5️⃣ ––––– Lint steps (use the already-built image)
      - name: Flake8
        run: docker compose run --rm app flake8
      - name: isort
        run: docker compose run --rm app isort --check-only .

  # ---------------- SECURITY SCAN ----------------
  security-scan:
    name: CodeQL Security Scan
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          build-mode: none # use "autobuild" for compiled languages

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ---------------- DEPLOY (main only) ----------------
  deploy:
    needs: [test-lint, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/checkout@v4.2.2

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy over SSH
        env: # all your secrets
          SSHPASS: ${{ secrets.DO_SSH_PASSWORD }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_HOST: ${{ secrets.DB_HOST }}
          PGADMIN_DEFAULT_EMAIL: ${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          CELERY_TIMEZONE: ${{ secrets.CELERY_TIMEZONE }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SUPPORT_EMAIL: ${{ secrets.SUPPORT_EMAIL }}
          SECURITY_EMAIL: ${{ secrets.SECURITY_EMAIL }}
          DOMAIN: ${{ secrets.DOMAIN }}
        run: | # ← single YAML literal block
          # --- SSH script ---

            sshpass -e ssh \
            -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 -o ServerAliveCountMax=20 \
            ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} <<'EOF'

          set -e
          cd ${{ secrets.DO_PROJECT_PATH }}
          git pull origin main

          cat > .env <<'ENV'
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_HOST=${{ secrets.DB_HOST }}
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}
          CELERY_TIMEZONE=${{ secrets.CELERY_TIMEZONE }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          SUPPORT_EMAIL=${{ secrets.SUPPORT_EMAIL }}
          SECURITY_EMAIL=${{ secrets.SECURITY_EMAIL }}
          DOMAIN=${{ secrets.DOMAIN }}
          ENV

          # --- end .env creation ---
          docker ps
          docker-compose down
          echo "1# Sleeping to allow services to initialize..."
          sleep 20
          docker-compose build
          echo "2# Sleeping to allow services to initialize..."
          sleep 20
          docker-compose up -d --remove-orphans
          echo "3# Sleeping to allow services to initialize..."
          sleep 20
          docker-compose ps

          EOF
